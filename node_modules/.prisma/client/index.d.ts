
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model a_user_role
 * 
 */
export type a_user_role = $Result.DefaultSelection<Prisma.$a_user_rolePayload>
/**
 * Model a_user_system
 * 
 */
export type a_user_system = $Result.DefaultSelection<Prisma.$a_user_systemPayload>
/**
 * Model a_department
 * 
 */
export type a_department = $Result.DefaultSelection<Prisma.$a_departmentPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more A_user_roles
 * const a_user_roles = await prisma.a_user_role.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more A_user_roles
   * const a_user_roles = await prisma.a_user_role.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.a_user_role`: Exposes CRUD operations for the **a_user_role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more A_user_roles
    * const a_user_roles = await prisma.a_user_role.findMany()
    * ```
    */
  get a_user_role(): Prisma.a_user_roleDelegate<ExtArgs>;

  /**
   * `prisma.a_user_system`: Exposes CRUD operations for the **a_user_system** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more A_user_systems
    * const a_user_systems = await prisma.a_user_system.findMany()
    * ```
    */
  get a_user_system(): Prisma.a_user_systemDelegate<ExtArgs>;

  /**
   * `prisma.a_department`: Exposes CRUD operations for the **a_department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more A_departments
    * const a_departments = await prisma.a_department.findMany()
    * ```
    */
  get a_department(): Prisma.a_departmentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    a_user_role: 'a_user_role',
    a_user_system: 'a_user_system',
    a_department: 'a_department'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "a_user_role" | "a_user_system" | "a_department"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      a_user_role: {
        payload: Prisma.$a_user_rolePayload<ExtArgs>
        fields: Prisma.a_user_roleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.a_user_roleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.a_user_roleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload>
          }
          findFirst: {
            args: Prisma.a_user_roleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.a_user_roleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload>
          }
          findMany: {
            args: Prisma.a_user_roleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload>[]
          }
          create: {
            args: Prisma.a_user_roleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload>
          }
          createMany: {
            args: Prisma.a_user_roleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.a_user_roleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload>[]
          }
          delete: {
            args: Prisma.a_user_roleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload>
          }
          update: {
            args: Prisma.a_user_roleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload>
          }
          deleteMany: {
            args: Prisma.a_user_roleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.a_user_roleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.a_user_roleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_rolePayload>
          }
          aggregate: {
            args: Prisma.A_user_roleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateA_user_role>
          }
          groupBy: {
            args: Prisma.a_user_roleGroupByArgs<ExtArgs>
            result: $Utils.Optional<A_user_roleGroupByOutputType>[]
          }
          count: {
            args: Prisma.a_user_roleCountArgs<ExtArgs>
            result: $Utils.Optional<A_user_roleCountAggregateOutputType> | number
          }
        }
      }
      a_user_system: {
        payload: Prisma.$a_user_systemPayload<ExtArgs>
        fields: Prisma.a_user_systemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.a_user_systemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.a_user_systemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload>
          }
          findFirst: {
            args: Prisma.a_user_systemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.a_user_systemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload>
          }
          findMany: {
            args: Prisma.a_user_systemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload>[]
          }
          create: {
            args: Prisma.a_user_systemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload>
          }
          createMany: {
            args: Prisma.a_user_systemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.a_user_systemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload>[]
          }
          delete: {
            args: Prisma.a_user_systemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload>
          }
          update: {
            args: Prisma.a_user_systemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload>
          }
          deleteMany: {
            args: Prisma.a_user_systemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.a_user_systemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.a_user_systemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_user_systemPayload>
          }
          aggregate: {
            args: Prisma.A_user_systemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateA_user_system>
          }
          groupBy: {
            args: Prisma.a_user_systemGroupByArgs<ExtArgs>
            result: $Utils.Optional<A_user_systemGroupByOutputType>[]
          }
          count: {
            args: Prisma.a_user_systemCountArgs<ExtArgs>
            result: $Utils.Optional<A_user_systemCountAggregateOutputType> | number
          }
        }
      }
      a_department: {
        payload: Prisma.$a_departmentPayload<ExtArgs>
        fields: Prisma.a_departmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.a_departmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.a_departmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload>
          }
          findFirst: {
            args: Prisma.a_departmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.a_departmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload>
          }
          findMany: {
            args: Prisma.a_departmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload>[]
          }
          create: {
            args: Prisma.a_departmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload>
          }
          createMany: {
            args: Prisma.a_departmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.a_departmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload>[]
          }
          delete: {
            args: Prisma.a_departmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload>
          }
          update: {
            args: Prisma.a_departmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload>
          }
          deleteMany: {
            args: Prisma.a_departmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.a_departmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.a_departmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$a_departmentPayload>
          }
          aggregate: {
            args: Prisma.A_departmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateA_department>
          }
          groupBy: {
            args: Prisma.a_departmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<A_departmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.a_departmentCountArgs<ExtArgs>
            result: $Utils.Optional<A_departmentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model a_user_role
   */

  export type AggregateA_user_role = {
    _count: A_user_roleCountAggregateOutputType | null
    _min: A_user_roleMinAggregateOutputType | null
    _max: A_user_roleMaxAggregateOutputType | null
  }

  export type A_user_roleMinAggregateOutputType = {
    role_id: string | null
    role_name: string | null
    transaction_date: Date | null
  }

  export type A_user_roleMaxAggregateOutputType = {
    role_id: string | null
    role_name: string | null
    transaction_date: Date | null
  }

  export type A_user_roleCountAggregateOutputType = {
    role_id: number
    role_name: number
    transaction_date: number
    _all: number
  }


  export type A_user_roleMinAggregateInputType = {
    role_id?: true
    role_name?: true
    transaction_date?: true
  }

  export type A_user_roleMaxAggregateInputType = {
    role_id?: true
    role_name?: true
    transaction_date?: true
  }

  export type A_user_roleCountAggregateInputType = {
    role_id?: true
    role_name?: true
    transaction_date?: true
    _all?: true
  }

  export type A_user_roleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which a_user_role to aggregate.
     */
    where?: a_user_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_user_roles to fetch.
     */
    orderBy?: a_user_roleOrderByWithRelationInput | a_user_roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: a_user_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned a_user_roles
    **/
    _count?: true | A_user_roleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: A_user_roleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: A_user_roleMaxAggregateInputType
  }

  export type GetA_user_roleAggregateType<T extends A_user_roleAggregateArgs> = {
        [P in keyof T & keyof AggregateA_user_role]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateA_user_role[P]>
      : GetScalarType<T[P], AggregateA_user_role[P]>
  }




  export type a_user_roleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: a_user_roleWhereInput
    orderBy?: a_user_roleOrderByWithAggregationInput | a_user_roleOrderByWithAggregationInput[]
    by: A_user_roleScalarFieldEnum[] | A_user_roleScalarFieldEnum
    having?: a_user_roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: A_user_roleCountAggregateInputType | true
    _min?: A_user_roleMinAggregateInputType
    _max?: A_user_roleMaxAggregateInputType
  }

  export type A_user_roleGroupByOutputType = {
    role_id: string
    role_name: string
    transaction_date: Date
    _count: A_user_roleCountAggregateOutputType | null
    _min: A_user_roleMinAggregateOutputType | null
    _max: A_user_roleMaxAggregateOutputType | null
  }

  type GetA_user_roleGroupByPayload<T extends a_user_roleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<A_user_roleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof A_user_roleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], A_user_roleGroupByOutputType[P]>
            : GetScalarType<T[P], A_user_roleGroupByOutputType[P]>
        }
      >
    >


  export type a_user_roleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role_id?: boolean
    role_name?: boolean
    transaction_date?: boolean
  }, ExtArgs["result"]["a_user_role"]>

  export type a_user_roleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role_id?: boolean
    role_name?: boolean
    transaction_date?: boolean
  }, ExtArgs["result"]["a_user_role"]>

  export type a_user_roleSelectScalar = {
    role_id?: boolean
    role_name?: boolean
    transaction_date?: boolean
  }


  export type $a_user_rolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "a_user_role"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      role_id: string
      role_name: string
      transaction_date: Date
    }, ExtArgs["result"]["a_user_role"]>
    composites: {}
  }

  type a_user_roleGetPayload<S extends boolean | null | undefined | a_user_roleDefaultArgs> = $Result.GetResult<Prisma.$a_user_rolePayload, S>

  type a_user_roleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<a_user_roleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: A_user_roleCountAggregateInputType | true
    }

  export interface a_user_roleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['a_user_role'], meta: { name: 'a_user_role' } }
    /**
     * Find zero or one A_user_role that matches the filter.
     * @param {a_user_roleFindUniqueArgs} args - Arguments to find a A_user_role
     * @example
     * // Get one A_user_role
     * const a_user_role = await prisma.a_user_role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends a_user_roleFindUniqueArgs>(args: SelectSubset<T, a_user_roleFindUniqueArgs<ExtArgs>>): Prisma__a_user_roleClient<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one A_user_role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {a_user_roleFindUniqueOrThrowArgs} args - Arguments to find a A_user_role
     * @example
     * // Get one A_user_role
     * const a_user_role = await prisma.a_user_role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends a_user_roleFindUniqueOrThrowArgs>(args: SelectSubset<T, a_user_roleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__a_user_roleClient<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first A_user_role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_roleFindFirstArgs} args - Arguments to find a A_user_role
     * @example
     * // Get one A_user_role
     * const a_user_role = await prisma.a_user_role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends a_user_roleFindFirstArgs>(args?: SelectSubset<T, a_user_roleFindFirstArgs<ExtArgs>>): Prisma__a_user_roleClient<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first A_user_role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_roleFindFirstOrThrowArgs} args - Arguments to find a A_user_role
     * @example
     * // Get one A_user_role
     * const a_user_role = await prisma.a_user_role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends a_user_roleFindFirstOrThrowArgs>(args?: SelectSubset<T, a_user_roleFindFirstOrThrowArgs<ExtArgs>>): Prisma__a_user_roleClient<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more A_user_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_roleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all A_user_roles
     * const a_user_roles = await prisma.a_user_role.findMany()
     * 
     * // Get first 10 A_user_roles
     * const a_user_roles = await prisma.a_user_role.findMany({ take: 10 })
     * 
     * // Only select the `role_id`
     * const a_user_roleWithRole_idOnly = await prisma.a_user_role.findMany({ select: { role_id: true } })
     * 
     */
    findMany<T extends a_user_roleFindManyArgs>(args?: SelectSubset<T, a_user_roleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a A_user_role.
     * @param {a_user_roleCreateArgs} args - Arguments to create a A_user_role.
     * @example
     * // Create one A_user_role
     * const A_user_role = await prisma.a_user_role.create({
     *   data: {
     *     // ... data to create a A_user_role
     *   }
     * })
     * 
     */
    create<T extends a_user_roleCreateArgs>(args: SelectSubset<T, a_user_roleCreateArgs<ExtArgs>>): Prisma__a_user_roleClient<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many A_user_roles.
     * @param {a_user_roleCreateManyArgs} args - Arguments to create many A_user_roles.
     * @example
     * // Create many A_user_roles
     * const a_user_role = await prisma.a_user_role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends a_user_roleCreateManyArgs>(args?: SelectSubset<T, a_user_roleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many A_user_roles and returns the data saved in the database.
     * @param {a_user_roleCreateManyAndReturnArgs} args - Arguments to create many A_user_roles.
     * @example
     * // Create many A_user_roles
     * const a_user_role = await prisma.a_user_role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many A_user_roles and only return the `role_id`
     * const a_user_roleWithRole_idOnly = await prisma.a_user_role.createManyAndReturn({ 
     *   select: { role_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends a_user_roleCreateManyAndReturnArgs>(args?: SelectSubset<T, a_user_roleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a A_user_role.
     * @param {a_user_roleDeleteArgs} args - Arguments to delete one A_user_role.
     * @example
     * // Delete one A_user_role
     * const A_user_role = await prisma.a_user_role.delete({
     *   where: {
     *     // ... filter to delete one A_user_role
     *   }
     * })
     * 
     */
    delete<T extends a_user_roleDeleteArgs>(args: SelectSubset<T, a_user_roleDeleteArgs<ExtArgs>>): Prisma__a_user_roleClient<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one A_user_role.
     * @param {a_user_roleUpdateArgs} args - Arguments to update one A_user_role.
     * @example
     * // Update one A_user_role
     * const a_user_role = await prisma.a_user_role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends a_user_roleUpdateArgs>(args: SelectSubset<T, a_user_roleUpdateArgs<ExtArgs>>): Prisma__a_user_roleClient<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more A_user_roles.
     * @param {a_user_roleDeleteManyArgs} args - Arguments to filter A_user_roles to delete.
     * @example
     * // Delete a few A_user_roles
     * const { count } = await prisma.a_user_role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends a_user_roleDeleteManyArgs>(args?: SelectSubset<T, a_user_roleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more A_user_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many A_user_roles
     * const a_user_role = await prisma.a_user_role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends a_user_roleUpdateManyArgs>(args: SelectSubset<T, a_user_roleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one A_user_role.
     * @param {a_user_roleUpsertArgs} args - Arguments to update or create a A_user_role.
     * @example
     * // Update or create a A_user_role
     * const a_user_role = await prisma.a_user_role.upsert({
     *   create: {
     *     // ... data to create a A_user_role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the A_user_role we want to update
     *   }
     * })
     */
    upsert<T extends a_user_roleUpsertArgs>(args: SelectSubset<T, a_user_roleUpsertArgs<ExtArgs>>): Prisma__a_user_roleClient<$Result.GetResult<Prisma.$a_user_rolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of A_user_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_roleCountArgs} args - Arguments to filter A_user_roles to count.
     * @example
     * // Count the number of A_user_roles
     * const count = await prisma.a_user_role.count({
     *   where: {
     *     // ... the filter for the A_user_roles we want to count
     *   }
     * })
    **/
    count<T extends a_user_roleCountArgs>(
      args?: Subset<T, a_user_roleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], A_user_roleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a A_user_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {A_user_roleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends A_user_roleAggregateArgs>(args: Subset<T, A_user_roleAggregateArgs>): Prisma.PrismaPromise<GetA_user_roleAggregateType<T>>

    /**
     * Group by A_user_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends a_user_roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: a_user_roleGroupByArgs['orderBy'] }
        : { orderBy?: a_user_roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, a_user_roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetA_user_roleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the a_user_role model
   */
  readonly fields: a_user_roleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for a_user_role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__a_user_roleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the a_user_role model
   */ 
  interface a_user_roleFieldRefs {
    readonly role_id: FieldRef<"a_user_role", 'String'>
    readonly role_name: FieldRef<"a_user_role", 'String'>
    readonly transaction_date: FieldRef<"a_user_role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * a_user_role findUnique
   */
  export type a_user_roleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * Filter, which a_user_role to fetch.
     */
    where: a_user_roleWhereUniqueInput
  }

  /**
   * a_user_role findUniqueOrThrow
   */
  export type a_user_roleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * Filter, which a_user_role to fetch.
     */
    where: a_user_roleWhereUniqueInput
  }

  /**
   * a_user_role findFirst
   */
  export type a_user_roleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * Filter, which a_user_role to fetch.
     */
    where?: a_user_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_user_roles to fetch.
     */
    orderBy?: a_user_roleOrderByWithRelationInput | a_user_roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for a_user_roles.
     */
    cursor?: a_user_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of a_user_roles.
     */
    distinct?: A_user_roleScalarFieldEnum | A_user_roleScalarFieldEnum[]
  }

  /**
   * a_user_role findFirstOrThrow
   */
  export type a_user_roleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * Filter, which a_user_role to fetch.
     */
    where?: a_user_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_user_roles to fetch.
     */
    orderBy?: a_user_roleOrderByWithRelationInput | a_user_roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for a_user_roles.
     */
    cursor?: a_user_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of a_user_roles.
     */
    distinct?: A_user_roleScalarFieldEnum | A_user_roleScalarFieldEnum[]
  }

  /**
   * a_user_role findMany
   */
  export type a_user_roleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * Filter, which a_user_roles to fetch.
     */
    where?: a_user_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_user_roles to fetch.
     */
    orderBy?: a_user_roleOrderByWithRelationInput | a_user_roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing a_user_roles.
     */
    cursor?: a_user_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_user_roles.
     */
    skip?: number
    distinct?: A_user_roleScalarFieldEnum | A_user_roleScalarFieldEnum[]
  }

  /**
   * a_user_role create
   */
  export type a_user_roleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * The data needed to create a a_user_role.
     */
    data: XOR<a_user_roleCreateInput, a_user_roleUncheckedCreateInput>
  }

  /**
   * a_user_role createMany
   */
  export type a_user_roleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many a_user_roles.
     */
    data: a_user_roleCreateManyInput | a_user_roleCreateManyInput[]
  }

  /**
   * a_user_role createManyAndReturn
   */
  export type a_user_roleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many a_user_roles.
     */
    data: a_user_roleCreateManyInput | a_user_roleCreateManyInput[]
  }

  /**
   * a_user_role update
   */
  export type a_user_roleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * The data needed to update a a_user_role.
     */
    data: XOR<a_user_roleUpdateInput, a_user_roleUncheckedUpdateInput>
    /**
     * Choose, which a_user_role to update.
     */
    where: a_user_roleWhereUniqueInput
  }

  /**
   * a_user_role updateMany
   */
  export type a_user_roleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update a_user_roles.
     */
    data: XOR<a_user_roleUpdateManyMutationInput, a_user_roleUncheckedUpdateManyInput>
    /**
     * Filter which a_user_roles to update
     */
    where?: a_user_roleWhereInput
  }

  /**
   * a_user_role upsert
   */
  export type a_user_roleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * The filter to search for the a_user_role to update in case it exists.
     */
    where: a_user_roleWhereUniqueInput
    /**
     * In case the a_user_role found by the `where` argument doesn't exist, create a new a_user_role with this data.
     */
    create: XOR<a_user_roleCreateInput, a_user_roleUncheckedCreateInput>
    /**
     * In case the a_user_role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<a_user_roleUpdateInput, a_user_roleUncheckedUpdateInput>
  }

  /**
   * a_user_role delete
   */
  export type a_user_roleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
    /**
     * Filter which a_user_role to delete.
     */
    where: a_user_roleWhereUniqueInput
  }

  /**
   * a_user_role deleteMany
   */
  export type a_user_roleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which a_user_roles to delete
     */
    where?: a_user_roleWhereInput
  }

  /**
   * a_user_role without action
   */
  export type a_user_roleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_role
     */
    select?: a_user_roleSelect<ExtArgs> | null
  }


  /**
   * Model a_user_system
   */

  export type AggregateA_user_system = {
    _count: A_user_systemCountAggregateOutputType | null
    _min: A_user_systemMinAggregateOutputType | null
    _max: A_user_systemMaxAggregateOutputType | null
  }

  export type A_user_systemMinAggregateOutputType = {
    id_user: string | null
    transaction_date: Date | null
    nik: string | null
    username: string | null
    password: string | null
    role_id: string | null
    office_email: string | null
    department_code: string | null
    is_active: string | null
  }

  export type A_user_systemMaxAggregateOutputType = {
    id_user: string | null
    transaction_date: Date | null
    nik: string | null
    username: string | null
    password: string | null
    role_id: string | null
    office_email: string | null
    department_code: string | null
    is_active: string | null
  }

  export type A_user_systemCountAggregateOutputType = {
    id_user: number
    transaction_date: number
    nik: number
    username: number
    password: number
    role_id: number
    office_email: number
    department_code: number
    is_active: number
    _all: number
  }


  export type A_user_systemMinAggregateInputType = {
    id_user?: true
    transaction_date?: true
    nik?: true
    username?: true
    password?: true
    role_id?: true
    office_email?: true
    department_code?: true
    is_active?: true
  }

  export type A_user_systemMaxAggregateInputType = {
    id_user?: true
    transaction_date?: true
    nik?: true
    username?: true
    password?: true
    role_id?: true
    office_email?: true
    department_code?: true
    is_active?: true
  }

  export type A_user_systemCountAggregateInputType = {
    id_user?: true
    transaction_date?: true
    nik?: true
    username?: true
    password?: true
    role_id?: true
    office_email?: true
    department_code?: true
    is_active?: true
    _all?: true
  }

  export type A_user_systemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which a_user_system to aggregate.
     */
    where?: a_user_systemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_user_systems to fetch.
     */
    orderBy?: a_user_systemOrderByWithRelationInput | a_user_systemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: a_user_systemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_user_systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_user_systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned a_user_systems
    **/
    _count?: true | A_user_systemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: A_user_systemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: A_user_systemMaxAggregateInputType
  }

  export type GetA_user_systemAggregateType<T extends A_user_systemAggregateArgs> = {
        [P in keyof T & keyof AggregateA_user_system]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateA_user_system[P]>
      : GetScalarType<T[P], AggregateA_user_system[P]>
  }




  export type a_user_systemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: a_user_systemWhereInput
    orderBy?: a_user_systemOrderByWithAggregationInput | a_user_systemOrderByWithAggregationInput[]
    by: A_user_systemScalarFieldEnum[] | A_user_systemScalarFieldEnum
    having?: a_user_systemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: A_user_systemCountAggregateInputType | true
    _min?: A_user_systemMinAggregateInputType
    _max?: A_user_systemMaxAggregateInputType
  }

  export type A_user_systemGroupByOutputType = {
    id_user: string
    transaction_date: Date | null
    nik: string | null
    username: string | null
    password: string | null
    role_id: string | null
    office_email: string | null
    department_code: string | null
    is_active: string | null
    _count: A_user_systemCountAggregateOutputType | null
    _min: A_user_systemMinAggregateOutputType | null
    _max: A_user_systemMaxAggregateOutputType | null
  }

  type GetA_user_systemGroupByPayload<T extends a_user_systemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<A_user_systemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof A_user_systemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], A_user_systemGroupByOutputType[P]>
            : GetScalarType<T[P], A_user_systemGroupByOutputType[P]>
        }
      >
    >


  export type a_user_systemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_user?: boolean
    transaction_date?: boolean
    nik?: boolean
    username?: boolean
    password?: boolean
    role_id?: boolean
    office_email?: boolean
    department_code?: boolean
    is_active?: boolean
  }, ExtArgs["result"]["a_user_system"]>

  export type a_user_systemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_user?: boolean
    transaction_date?: boolean
    nik?: boolean
    username?: boolean
    password?: boolean
    role_id?: boolean
    office_email?: boolean
    department_code?: boolean
    is_active?: boolean
  }, ExtArgs["result"]["a_user_system"]>

  export type a_user_systemSelectScalar = {
    id_user?: boolean
    transaction_date?: boolean
    nik?: boolean
    username?: boolean
    password?: boolean
    role_id?: boolean
    office_email?: boolean
    department_code?: boolean
    is_active?: boolean
  }


  export type $a_user_systemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "a_user_system"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_user: string
      transaction_date: Date | null
      nik: string | null
      username: string | null
      password: string | null
      role_id: string | null
      office_email: string | null
      department_code: string | null
      is_active: string | null
    }, ExtArgs["result"]["a_user_system"]>
    composites: {}
  }

  type a_user_systemGetPayload<S extends boolean | null | undefined | a_user_systemDefaultArgs> = $Result.GetResult<Prisma.$a_user_systemPayload, S>

  type a_user_systemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<a_user_systemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: A_user_systemCountAggregateInputType | true
    }

  export interface a_user_systemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['a_user_system'], meta: { name: 'a_user_system' } }
    /**
     * Find zero or one A_user_system that matches the filter.
     * @param {a_user_systemFindUniqueArgs} args - Arguments to find a A_user_system
     * @example
     * // Get one A_user_system
     * const a_user_system = await prisma.a_user_system.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends a_user_systemFindUniqueArgs>(args: SelectSubset<T, a_user_systemFindUniqueArgs<ExtArgs>>): Prisma__a_user_systemClient<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one A_user_system that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {a_user_systemFindUniqueOrThrowArgs} args - Arguments to find a A_user_system
     * @example
     * // Get one A_user_system
     * const a_user_system = await prisma.a_user_system.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends a_user_systemFindUniqueOrThrowArgs>(args: SelectSubset<T, a_user_systemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__a_user_systemClient<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first A_user_system that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_systemFindFirstArgs} args - Arguments to find a A_user_system
     * @example
     * // Get one A_user_system
     * const a_user_system = await prisma.a_user_system.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends a_user_systemFindFirstArgs>(args?: SelectSubset<T, a_user_systemFindFirstArgs<ExtArgs>>): Prisma__a_user_systemClient<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first A_user_system that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_systemFindFirstOrThrowArgs} args - Arguments to find a A_user_system
     * @example
     * // Get one A_user_system
     * const a_user_system = await prisma.a_user_system.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends a_user_systemFindFirstOrThrowArgs>(args?: SelectSubset<T, a_user_systemFindFirstOrThrowArgs<ExtArgs>>): Prisma__a_user_systemClient<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more A_user_systems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_systemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all A_user_systems
     * const a_user_systems = await prisma.a_user_system.findMany()
     * 
     * // Get first 10 A_user_systems
     * const a_user_systems = await prisma.a_user_system.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const a_user_systemWithId_userOnly = await prisma.a_user_system.findMany({ select: { id_user: true } })
     * 
     */
    findMany<T extends a_user_systemFindManyArgs>(args?: SelectSubset<T, a_user_systemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a A_user_system.
     * @param {a_user_systemCreateArgs} args - Arguments to create a A_user_system.
     * @example
     * // Create one A_user_system
     * const A_user_system = await prisma.a_user_system.create({
     *   data: {
     *     // ... data to create a A_user_system
     *   }
     * })
     * 
     */
    create<T extends a_user_systemCreateArgs>(args: SelectSubset<T, a_user_systemCreateArgs<ExtArgs>>): Prisma__a_user_systemClient<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many A_user_systems.
     * @param {a_user_systemCreateManyArgs} args - Arguments to create many A_user_systems.
     * @example
     * // Create many A_user_systems
     * const a_user_system = await prisma.a_user_system.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends a_user_systemCreateManyArgs>(args?: SelectSubset<T, a_user_systemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many A_user_systems and returns the data saved in the database.
     * @param {a_user_systemCreateManyAndReturnArgs} args - Arguments to create many A_user_systems.
     * @example
     * // Create many A_user_systems
     * const a_user_system = await prisma.a_user_system.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many A_user_systems and only return the `id_user`
     * const a_user_systemWithId_userOnly = await prisma.a_user_system.createManyAndReturn({ 
     *   select: { id_user: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends a_user_systemCreateManyAndReturnArgs>(args?: SelectSubset<T, a_user_systemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a A_user_system.
     * @param {a_user_systemDeleteArgs} args - Arguments to delete one A_user_system.
     * @example
     * // Delete one A_user_system
     * const A_user_system = await prisma.a_user_system.delete({
     *   where: {
     *     // ... filter to delete one A_user_system
     *   }
     * })
     * 
     */
    delete<T extends a_user_systemDeleteArgs>(args: SelectSubset<T, a_user_systemDeleteArgs<ExtArgs>>): Prisma__a_user_systemClient<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one A_user_system.
     * @param {a_user_systemUpdateArgs} args - Arguments to update one A_user_system.
     * @example
     * // Update one A_user_system
     * const a_user_system = await prisma.a_user_system.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends a_user_systemUpdateArgs>(args: SelectSubset<T, a_user_systemUpdateArgs<ExtArgs>>): Prisma__a_user_systemClient<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more A_user_systems.
     * @param {a_user_systemDeleteManyArgs} args - Arguments to filter A_user_systems to delete.
     * @example
     * // Delete a few A_user_systems
     * const { count } = await prisma.a_user_system.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends a_user_systemDeleteManyArgs>(args?: SelectSubset<T, a_user_systemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more A_user_systems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_systemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many A_user_systems
     * const a_user_system = await prisma.a_user_system.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends a_user_systemUpdateManyArgs>(args: SelectSubset<T, a_user_systemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one A_user_system.
     * @param {a_user_systemUpsertArgs} args - Arguments to update or create a A_user_system.
     * @example
     * // Update or create a A_user_system
     * const a_user_system = await prisma.a_user_system.upsert({
     *   create: {
     *     // ... data to create a A_user_system
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the A_user_system we want to update
     *   }
     * })
     */
    upsert<T extends a_user_systemUpsertArgs>(args: SelectSubset<T, a_user_systemUpsertArgs<ExtArgs>>): Prisma__a_user_systemClient<$Result.GetResult<Prisma.$a_user_systemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of A_user_systems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_systemCountArgs} args - Arguments to filter A_user_systems to count.
     * @example
     * // Count the number of A_user_systems
     * const count = await prisma.a_user_system.count({
     *   where: {
     *     // ... the filter for the A_user_systems we want to count
     *   }
     * })
    **/
    count<T extends a_user_systemCountArgs>(
      args?: Subset<T, a_user_systemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], A_user_systemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a A_user_system.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {A_user_systemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends A_user_systemAggregateArgs>(args: Subset<T, A_user_systemAggregateArgs>): Prisma.PrismaPromise<GetA_user_systemAggregateType<T>>

    /**
     * Group by A_user_system.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_user_systemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends a_user_systemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: a_user_systemGroupByArgs['orderBy'] }
        : { orderBy?: a_user_systemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, a_user_systemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetA_user_systemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the a_user_system model
   */
  readonly fields: a_user_systemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for a_user_system.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__a_user_systemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the a_user_system model
   */ 
  interface a_user_systemFieldRefs {
    readonly id_user: FieldRef<"a_user_system", 'String'>
    readonly transaction_date: FieldRef<"a_user_system", 'DateTime'>
    readonly nik: FieldRef<"a_user_system", 'String'>
    readonly username: FieldRef<"a_user_system", 'String'>
    readonly password: FieldRef<"a_user_system", 'String'>
    readonly role_id: FieldRef<"a_user_system", 'String'>
    readonly office_email: FieldRef<"a_user_system", 'String'>
    readonly department_code: FieldRef<"a_user_system", 'String'>
    readonly is_active: FieldRef<"a_user_system", 'String'>
  }
    

  // Custom InputTypes
  /**
   * a_user_system findUnique
   */
  export type a_user_systemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * Filter, which a_user_system to fetch.
     */
    where: a_user_systemWhereUniqueInput
  }

  /**
   * a_user_system findUniqueOrThrow
   */
  export type a_user_systemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * Filter, which a_user_system to fetch.
     */
    where: a_user_systemWhereUniqueInput
  }

  /**
   * a_user_system findFirst
   */
  export type a_user_systemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * Filter, which a_user_system to fetch.
     */
    where?: a_user_systemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_user_systems to fetch.
     */
    orderBy?: a_user_systemOrderByWithRelationInput | a_user_systemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for a_user_systems.
     */
    cursor?: a_user_systemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_user_systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_user_systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of a_user_systems.
     */
    distinct?: A_user_systemScalarFieldEnum | A_user_systemScalarFieldEnum[]
  }

  /**
   * a_user_system findFirstOrThrow
   */
  export type a_user_systemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * Filter, which a_user_system to fetch.
     */
    where?: a_user_systemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_user_systems to fetch.
     */
    orderBy?: a_user_systemOrderByWithRelationInput | a_user_systemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for a_user_systems.
     */
    cursor?: a_user_systemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_user_systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_user_systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of a_user_systems.
     */
    distinct?: A_user_systemScalarFieldEnum | A_user_systemScalarFieldEnum[]
  }

  /**
   * a_user_system findMany
   */
  export type a_user_systemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * Filter, which a_user_systems to fetch.
     */
    where?: a_user_systemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_user_systems to fetch.
     */
    orderBy?: a_user_systemOrderByWithRelationInput | a_user_systemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing a_user_systems.
     */
    cursor?: a_user_systemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_user_systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_user_systems.
     */
    skip?: number
    distinct?: A_user_systemScalarFieldEnum | A_user_systemScalarFieldEnum[]
  }

  /**
   * a_user_system create
   */
  export type a_user_systemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * The data needed to create a a_user_system.
     */
    data: XOR<a_user_systemCreateInput, a_user_systemUncheckedCreateInput>
  }

  /**
   * a_user_system createMany
   */
  export type a_user_systemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many a_user_systems.
     */
    data: a_user_systemCreateManyInput | a_user_systemCreateManyInput[]
  }

  /**
   * a_user_system createManyAndReturn
   */
  export type a_user_systemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many a_user_systems.
     */
    data: a_user_systemCreateManyInput | a_user_systemCreateManyInput[]
  }

  /**
   * a_user_system update
   */
  export type a_user_systemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * The data needed to update a a_user_system.
     */
    data: XOR<a_user_systemUpdateInput, a_user_systemUncheckedUpdateInput>
    /**
     * Choose, which a_user_system to update.
     */
    where: a_user_systemWhereUniqueInput
  }

  /**
   * a_user_system updateMany
   */
  export type a_user_systemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update a_user_systems.
     */
    data: XOR<a_user_systemUpdateManyMutationInput, a_user_systemUncheckedUpdateManyInput>
    /**
     * Filter which a_user_systems to update
     */
    where?: a_user_systemWhereInput
  }

  /**
   * a_user_system upsert
   */
  export type a_user_systemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * The filter to search for the a_user_system to update in case it exists.
     */
    where: a_user_systemWhereUniqueInput
    /**
     * In case the a_user_system found by the `where` argument doesn't exist, create a new a_user_system with this data.
     */
    create: XOR<a_user_systemCreateInput, a_user_systemUncheckedCreateInput>
    /**
     * In case the a_user_system was found with the provided `where` argument, update it with this data.
     */
    update: XOR<a_user_systemUpdateInput, a_user_systemUncheckedUpdateInput>
  }

  /**
   * a_user_system delete
   */
  export type a_user_systemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
    /**
     * Filter which a_user_system to delete.
     */
    where: a_user_systemWhereUniqueInput
  }

  /**
   * a_user_system deleteMany
   */
  export type a_user_systemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which a_user_systems to delete
     */
    where?: a_user_systemWhereInput
  }

  /**
   * a_user_system without action
   */
  export type a_user_systemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_user_system
     */
    select?: a_user_systemSelect<ExtArgs> | null
  }


  /**
   * Model a_department
   */

  export type AggregateA_department = {
    _count: A_departmentCountAggregateOutputType | null
    _min: A_departmentMinAggregateOutputType | null
    _max: A_departmentMaxAggregateOutputType | null
  }

  export type A_departmentMinAggregateOutputType = {
    department_id: string | null
    department_code: string | null
    department_name: string | null
    created_at: Date | null
  }

  export type A_departmentMaxAggregateOutputType = {
    department_id: string | null
    department_code: string | null
    department_name: string | null
    created_at: Date | null
  }

  export type A_departmentCountAggregateOutputType = {
    department_id: number
    department_code: number
    department_name: number
    created_at: number
    _all: number
  }


  export type A_departmentMinAggregateInputType = {
    department_id?: true
    department_code?: true
    department_name?: true
    created_at?: true
  }

  export type A_departmentMaxAggregateInputType = {
    department_id?: true
    department_code?: true
    department_name?: true
    created_at?: true
  }

  export type A_departmentCountAggregateInputType = {
    department_id?: true
    department_code?: true
    department_name?: true
    created_at?: true
    _all?: true
  }

  export type A_departmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which a_department to aggregate.
     */
    where?: a_departmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_departments to fetch.
     */
    orderBy?: a_departmentOrderByWithRelationInput | a_departmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: a_departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned a_departments
    **/
    _count?: true | A_departmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: A_departmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: A_departmentMaxAggregateInputType
  }

  export type GetA_departmentAggregateType<T extends A_departmentAggregateArgs> = {
        [P in keyof T & keyof AggregateA_department]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateA_department[P]>
      : GetScalarType<T[P], AggregateA_department[P]>
  }




  export type a_departmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: a_departmentWhereInput
    orderBy?: a_departmentOrderByWithAggregationInput | a_departmentOrderByWithAggregationInput[]
    by: A_departmentScalarFieldEnum[] | A_departmentScalarFieldEnum
    having?: a_departmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: A_departmentCountAggregateInputType | true
    _min?: A_departmentMinAggregateInputType
    _max?: A_departmentMaxAggregateInputType
  }

  export type A_departmentGroupByOutputType = {
    department_id: string
    department_code: string | null
    department_name: string | null
    created_at: Date | null
    _count: A_departmentCountAggregateOutputType | null
    _min: A_departmentMinAggregateOutputType | null
    _max: A_departmentMaxAggregateOutputType | null
  }

  type GetA_departmentGroupByPayload<T extends a_departmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<A_departmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof A_departmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], A_departmentGroupByOutputType[P]>
            : GetScalarType<T[P], A_departmentGroupByOutputType[P]>
        }
      >
    >


  export type a_departmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    department_id?: boolean
    department_code?: boolean
    department_name?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["a_department"]>

  export type a_departmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    department_id?: boolean
    department_code?: boolean
    department_name?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["a_department"]>

  export type a_departmentSelectScalar = {
    department_id?: boolean
    department_code?: boolean
    department_name?: boolean
    created_at?: boolean
  }


  export type $a_departmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "a_department"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      department_id: string
      department_code: string | null
      department_name: string | null
      created_at: Date | null
    }, ExtArgs["result"]["a_department"]>
    composites: {}
  }

  type a_departmentGetPayload<S extends boolean | null | undefined | a_departmentDefaultArgs> = $Result.GetResult<Prisma.$a_departmentPayload, S>

  type a_departmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<a_departmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: A_departmentCountAggregateInputType | true
    }

  export interface a_departmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['a_department'], meta: { name: 'a_department' } }
    /**
     * Find zero or one A_department that matches the filter.
     * @param {a_departmentFindUniqueArgs} args - Arguments to find a A_department
     * @example
     * // Get one A_department
     * const a_department = await prisma.a_department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends a_departmentFindUniqueArgs>(args: SelectSubset<T, a_departmentFindUniqueArgs<ExtArgs>>): Prisma__a_departmentClient<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one A_department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {a_departmentFindUniqueOrThrowArgs} args - Arguments to find a A_department
     * @example
     * // Get one A_department
     * const a_department = await prisma.a_department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends a_departmentFindUniqueOrThrowArgs>(args: SelectSubset<T, a_departmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__a_departmentClient<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first A_department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_departmentFindFirstArgs} args - Arguments to find a A_department
     * @example
     * // Get one A_department
     * const a_department = await prisma.a_department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends a_departmentFindFirstArgs>(args?: SelectSubset<T, a_departmentFindFirstArgs<ExtArgs>>): Prisma__a_departmentClient<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first A_department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_departmentFindFirstOrThrowArgs} args - Arguments to find a A_department
     * @example
     * // Get one A_department
     * const a_department = await prisma.a_department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends a_departmentFindFirstOrThrowArgs>(args?: SelectSubset<T, a_departmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__a_departmentClient<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more A_departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_departmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all A_departments
     * const a_departments = await prisma.a_department.findMany()
     * 
     * // Get first 10 A_departments
     * const a_departments = await prisma.a_department.findMany({ take: 10 })
     * 
     * // Only select the `department_id`
     * const a_departmentWithDepartment_idOnly = await prisma.a_department.findMany({ select: { department_id: true } })
     * 
     */
    findMany<T extends a_departmentFindManyArgs>(args?: SelectSubset<T, a_departmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a A_department.
     * @param {a_departmentCreateArgs} args - Arguments to create a A_department.
     * @example
     * // Create one A_department
     * const A_department = await prisma.a_department.create({
     *   data: {
     *     // ... data to create a A_department
     *   }
     * })
     * 
     */
    create<T extends a_departmentCreateArgs>(args: SelectSubset<T, a_departmentCreateArgs<ExtArgs>>): Prisma__a_departmentClient<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many A_departments.
     * @param {a_departmentCreateManyArgs} args - Arguments to create many A_departments.
     * @example
     * // Create many A_departments
     * const a_department = await prisma.a_department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends a_departmentCreateManyArgs>(args?: SelectSubset<T, a_departmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many A_departments and returns the data saved in the database.
     * @param {a_departmentCreateManyAndReturnArgs} args - Arguments to create many A_departments.
     * @example
     * // Create many A_departments
     * const a_department = await prisma.a_department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many A_departments and only return the `department_id`
     * const a_departmentWithDepartment_idOnly = await prisma.a_department.createManyAndReturn({ 
     *   select: { department_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends a_departmentCreateManyAndReturnArgs>(args?: SelectSubset<T, a_departmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a A_department.
     * @param {a_departmentDeleteArgs} args - Arguments to delete one A_department.
     * @example
     * // Delete one A_department
     * const A_department = await prisma.a_department.delete({
     *   where: {
     *     // ... filter to delete one A_department
     *   }
     * })
     * 
     */
    delete<T extends a_departmentDeleteArgs>(args: SelectSubset<T, a_departmentDeleteArgs<ExtArgs>>): Prisma__a_departmentClient<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one A_department.
     * @param {a_departmentUpdateArgs} args - Arguments to update one A_department.
     * @example
     * // Update one A_department
     * const a_department = await prisma.a_department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends a_departmentUpdateArgs>(args: SelectSubset<T, a_departmentUpdateArgs<ExtArgs>>): Prisma__a_departmentClient<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more A_departments.
     * @param {a_departmentDeleteManyArgs} args - Arguments to filter A_departments to delete.
     * @example
     * // Delete a few A_departments
     * const { count } = await prisma.a_department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends a_departmentDeleteManyArgs>(args?: SelectSubset<T, a_departmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more A_departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_departmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many A_departments
     * const a_department = await prisma.a_department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends a_departmentUpdateManyArgs>(args: SelectSubset<T, a_departmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one A_department.
     * @param {a_departmentUpsertArgs} args - Arguments to update or create a A_department.
     * @example
     * // Update or create a A_department
     * const a_department = await prisma.a_department.upsert({
     *   create: {
     *     // ... data to create a A_department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the A_department we want to update
     *   }
     * })
     */
    upsert<T extends a_departmentUpsertArgs>(args: SelectSubset<T, a_departmentUpsertArgs<ExtArgs>>): Prisma__a_departmentClient<$Result.GetResult<Prisma.$a_departmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of A_departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_departmentCountArgs} args - Arguments to filter A_departments to count.
     * @example
     * // Count the number of A_departments
     * const count = await prisma.a_department.count({
     *   where: {
     *     // ... the filter for the A_departments we want to count
     *   }
     * })
    **/
    count<T extends a_departmentCountArgs>(
      args?: Subset<T, a_departmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], A_departmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a A_department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {A_departmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends A_departmentAggregateArgs>(args: Subset<T, A_departmentAggregateArgs>): Prisma.PrismaPromise<GetA_departmentAggregateType<T>>

    /**
     * Group by A_department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {a_departmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends a_departmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: a_departmentGroupByArgs['orderBy'] }
        : { orderBy?: a_departmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, a_departmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetA_departmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the a_department model
   */
  readonly fields: a_departmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for a_department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__a_departmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the a_department model
   */ 
  interface a_departmentFieldRefs {
    readonly department_id: FieldRef<"a_department", 'String'>
    readonly department_code: FieldRef<"a_department", 'String'>
    readonly department_name: FieldRef<"a_department", 'String'>
    readonly created_at: FieldRef<"a_department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * a_department findUnique
   */
  export type a_departmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * Filter, which a_department to fetch.
     */
    where: a_departmentWhereUniqueInput
  }

  /**
   * a_department findUniqueOrThrow
   */
  export type a_departmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * Filter, which a_department to fetch.
     */
    where: a_departmentWhereUniqueInput
  }

  /**
   * a_department findFirst
   */
  export type a_departmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * Filter, which a_department to fetch.
     */
    where?: a_departmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_departments to fetch.
     */
    orderBy?: a_departmentOrderByWithRelationInput | a_departmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for a_departments.
     */
    cursor?: a_departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of a_departments.
     */
    distinct?: A_departmentScalarFieldEnum | A_departmentScalarFieldEnum[]
  }

  /**
   * a_department findFirstOrThrow
   */
  export type a_departmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * Filter, which a_department to fetch.
     */
    where?: a_departmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_departments to fetch.
     */
    orderBy?: a_departmentOrderByWithRelationInput | a_departmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for a_departments.
     */
    cursor?: a_departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of a_departments.
     */
    distinct?: A_departmentScalarFieldEnum | A_departmentScalarFieldEnum[]
  }

  /**
   * a_department findMany
   */
  export type a_departmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * Filter, which a_departments to fetch.
     */
    where?: a_departmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of a_departments to fetch.
     */
    orderBy?: a_departmentOrderByWithRelationInput | a_departmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing a_departments.
     */
    cursor?: a_departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` a_departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` a_departments.
     */
    skip?: number
    distinct?: A_departmentScalarFieldEnum | A_departmentScalarFieldEnum[]
  }

  /**
   * a_department create
   */
  export type a_departmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * The data needed to create a a_department.
     */
    data: XOR<a_departmentCreateInput, a_departmentUncheckedCreateInput>
  }

  /**
   * a_department createMany
   */
  export type a_departmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many a_departments.
     */
    data: a_departmentCreateManyInput | a_departmentCreateManyInput[]
  }

  /**
   * a_department createManyAndReturn
   */
  export type a_departmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many a_departments.
     */
    data: a_departmentCreateManyInput | a_departmentCreateManyInput[]
  }

  /**
   * a_department update
   */
  export type a_departmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * The data needed to update a a_department.
     */
    data: XOR<a_departmentUpdateInput, a_departmentUncheckedUpdateInput>
    /**
     * Choose, which a_department to update.
     */
    where: a_departmentWhereUniqueInput
  }

  /**
   * a_department updateMany
   */
  export type a_departmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update a_departments.
     */
    data: XOR<a_departmentUpdateManyMutationInput, a_departmentUncheckedUpdateManyInput>
    /**
     * Filter which a_departments to update
     */
    where?: a_departmentWhereInput
  }

  /**
   * a_department upsert
   */
  export type a_departmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * The filter to search for the a_department to update in case it exists.
     */
    where: a_departmentWhereUniqueInput
    /**
     * In case the a_department found by the `where` argument doesn't exist, create a new a_department with this data.
     */
    create: XOR<a_departmentCreateInput, a_departmentUncheckedCreateInput>
    /**
     * In case the a_department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<a_departmentUpdateInput, a_departmentUncheckedUpdateInput>
  }

  /**
   * a_department delete
   */
  export type a_departmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
    /**
     * Filter which a_department to delete.
     */
    where: a_departmentWhereUniqueInput
  }

  /**
   * a_department deleteMany
   */
  export type a_departmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which a_departments to delete
     */
    where?: a_departmentWhereInput
  }

  /**
   * a_department without action
   */
  export type a_departmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the a_department
     */
    select?: a_departmentSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const A_user_roleScalarFieldEnum: {
    role_id: 'role_id',
    role_name: 'role_name',
    transaction_date: 'transaction_date'
  };

  export type A_user_roleScalarFieldEnum = (typeof A_user_roleScalarFieldEnum)[keyof typeof A_user_roleScalarFieldEnum]


  export const A_user_systemScalarFieldEnum: {
    id_user: 'id_user',
    transaction_date: 'transaction_date',
    nik: 'nik',
    username: 'username',
    password: 'password',
    role_id: 'role_id',
    office_email: 'office_email',
    department_code: 'department_code',
    is_active: 'is_active'
  };

  export type A_user_systemScalarFieldEnum = (typeof A_user_systemScalarFieldEnum)[keyof typeof A_user_systemScalarFieldEnum]


  export const A_departmentScalarFieldEnum: {
    department_id: 'department_id',
    department_code: 'department_code',
    department_name: 'department_name',
    created_at: 'created_at'
  };

  export type A_departmentScalarFieldEnum = (typeof A_departmentScalarFieldEnum)[keyof typeof A_departmentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type a_user_roleWhereInput = {
    AND?: a_user_roleWhereInput | a_user_roleWhereInput[]
    OR?: a_user_roleWhereInput[]
    NOT?: a_user_roleWhereInput | a_user_roleWhereInput[]
    role_id?: StringFilter<"a_user_role"> | string
    role_name?: StringFilter<"a_user_role"> | string
    transaction_date?: DateTimeFilter<"a_user_role"> | Date | string
  }

  export type a_user_roleOrderByWithRelationInput = {
    role_id?: SortOrder
    role_name?: SortOrder
    transaction_date?: SortOrder
  }

  export type a_user_roleWhereUniqueInput = Prisma.AtLeast<{
    role_id?: string
    AND?: a_user_roleWhereInput | a_user_roleWhereInput[]
    OR?: a_user_roleWhereInput[]
    NOT?: a_user_roleWhereInput | a_user_roleWhereInput[]
    role_name?: StringFilter<"a_user_role"> | string
    transaction_date?: DateTimeFilter<"a_user_role"> | Date | string
  }, "role_id">

  export type a_user_roleOrderByWithAggregationInput = {
    role_id?: SortOrder
    role_name?: SortOrder
    transaction_date?: SortOrder
    _count?: a_user_roleCountOrderByAggregateInput
    _max?: a_user_roleMaxOrderByAggregateInput
    _min?: a_user_roleMinOrderByAggregateInput
  }

  export type a_user_roleScalarWhereWithAggregatesInput = {
    AND?: a_user_roleScalarWhereWithAggregatesInput | a_user_roleScalarWhereWithAggregatesInput[]
    OR?: a_user_roleScalarWhereWithAggregatesInput[]
    NOT?: a_user_roleScalarWhereWithAggregatesInput | a_user_roleScalarWhereWithAggregatesInput[]
    role_id?: StringWithAggregatesFilter<"a_user_role"> | string
    role_name?: StringWithAggregatesFilter<"a_user_role"> | string
    transaction_date?: DateTimeWithAggregatesFilter<"a_user_role"> | Date | string
  }

  export type a_user_systemWhereInput = {
    AND?: a_user_systemWhereInput | a_user_systemWhereInput[]
    OR?: a_user_systemWhereInput[]
    NOT?: a_user_systemWhereInput | a_user_systemWhereInput[]
    id_user?: StringFilter<"a_user_system"> | string
    transaction_date?: DateTimeNullableFilter<"a_user_system"> | Date | string | null
    nik?: StringNullableFilter<"a_user_system"> | string | null
    username?: StringNullableFilter<"a_user_system"> | string | null
    password?: StringNullableFilter<"a_user_system"> | string | null
    role_id?: StringNullableFilter<"a_user_system"> | string | null
    office_email?: StringNullableFilter<"a_user_system"> | string | null
    department_code?: StringNullableFilter<"a_user_system"> | string | null
    is_active?: StringNullableFilter<"a_user_system"> | string | null
  }

  export type a_user_systemOrderByWithRelationInput = {
    id_user?: SortOrder
    transaction_date?: SortOrderInput | SortOrder
    nik?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role_id?: SortOrderInput | SortOrder
    office_email?: SortOrderInput | SortOrder
    department_code?: SortOrderInput | SortOrder
    is_active?: SortOrderInput | SortOrder
  }

  export type a_user_systemWhereUniqueInput = Prisma.AtLeast<{
    id_user?: string
    AND?: a_user_systemWhereInput | a_user_systemWhereInput[]
    OR?: a_user_systemWhereInput[]
    NOT?: a_user_systemWhereInput | a_user_systemWhereInput[]
    transaction_date?: DateTimeNullableFilter<"a_user_system"> | Date | string | null
    nik?: StringNullableFilter<"a_user_system"> | string | null
    username?: StringNullableFilter<"a_user_system"> | string | null
    password?: StringNullableFilter<"a_user_system"> | string | null
    role_id?: StringNullableFilter<"a_user_system"> | string | null
    office_email?: StringNullableFilter<"a_user_system"> | string | null
    department_code?: StringNullableFilter<"a_user_system"> | string | null
    is_active?: StringNullableFilter<"a_user_system"> | string | null
  }, "id_user">

  export type a_user_systemOrderByWithAggregationInput = {
    id_user?: SortOrder
    transaction_date?: SortOrderInput | SortOrder
    nik?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role_id?: SortOrderInput | SortOrder
    office_email?: SortOrderInput | SortOrder
    department_code?: SortOrderInput | SortOrder
    is_active?: SortOrderInput | SortOrder
    _count?: a_user_systemCountOrderByAggregateInput
    _max?: a_user_systemMaxOrderByAggregateInput
    _min?: a_user_systemMinOrderByAggregateInput
  }

  export type a_user_systemScalarWhereWithAggregatesInput = {
    AND?: a_user_systemScalarWhereWithAggregatesInput | a_user_systemScalarWhereWithAggregatesInput[]
    OR?: a_user_systemScalarWhereWithAggregatesInput[]
    NOT?: a_user_systemScalarWhereWithAggregatesInput | a_user_systemScalarWhereWithAggregatesInput[]
    id_user?: StringWithAggregatesFilter<"a_user_system"> | string
    transaction_date?: DateTimeNullableWithAggregatesFilter<"a_user_system"> | Date | string | null
    nik?: StringNullableWithAggregatesFilter<"a_user_system"> | string | null
    username?: StringNullableWithAggregatesFilter<"a_user_system"> | string | null
    password?: StringNullableWithAggregatesFilter<"a_user_system"> | string | null
    role_id?: StringNullableWithAggregatesFilter<"a_user_system"> | string | null
    office_email?: StringNullableWithAggregatesFilter<"a_user_system"> | string | null
    department_code?: StringNullableWithAggregatesFilter<"a_user_system"> | string | null
    is_active?: StringNullableWithAggregatesFilter<"a_user_system"> | string | null
  }

  export type a_departmentWhereInput = {
    AND?: a_departmentWhereInput | a_departmentWhereInput[]
    OR?: a_departmentWhereInput[]
    NOT?: a_departmentWhereInput | a_departmentWhereInput[]
    department_id?: StringFilter<"a_department"> | string
    department_code?: StringNullableFilter<"a_department"> | string | null
    department_name?: StringNullableFilter<"a_department"> | string | null
    created_at?: DateTimeNullableFilter<"a_department"> | Date | string | null
  }

  export type a_departmentOrderByWithRelationInput = {
    department_id?: SortOrder
    department_code?: SortOrderInput | SortOrder
    department_name?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
  }

  export type a_departmentWhereUniqueInput = Prisma.AtLeast<{
    department_id?: string
    department_code?: string
    AND?: a_departmentWhereInput | a_departmentWhereInput[]
    OR?: a_departmentWhereInput[]
    NOT?: a_departmentWhereInput | a_departmentWhereInput[]
    department_name?: StringNullableFilter<"a_department"> | string | null
    created_at?: DateTimeNullableFilter<"a_department"> | Date | string | null
  }, "department_id" | "department_code">

  export type a_departmentOrderByWithAggregationInput = {
    department_id?: SortOrder
    department_code?: SortOrderInput | SortOrder
    department_name?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: a_departmentCountOrderByAggregateInput
    _max?: a_departmentMaxOrderByAggregateInput
    _min?: a_departmentMinOrderByAggregateInput
  }

  export type a_departmentScalarWhereWithAggregatesInput = {
    AND?: a_departmentScalarWhereWithAggregatesInput | a_departmentScalarWhereWithAggregatesInput[]
    OR?: a_departmentScalarWhereWithAggregatesInput[]
    NOT?: a_departmentScalarWhereWithAggregatesInput | a_departmentScalarWhereWithAggregatesInput[]
    department_id?: StringWithAggregatesFilter<"a_department"> | string
    department_code?: StringNullableWithAggregatesFilter<"a_department"> | string | null
    department_name?: StringNullableWithAggregatesFilter<"a_department"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"a_department"> | Date | string | null
  }

  export type a_user_roleCreateInput = {
    role_id: string
    role_name: string
    transaction_date: Date | string
  }

  export type a_user_roleUncheckedCreateInput = {
    role_id: string
    role_name: string
    transaction_date: Date | string
  }

  export type a_user_roleUpdateInput = {
    role_id?: StringFieldUpdateOperationsInput | string
    role_name?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type a_user_roleUncheckedUpdateInput = {
    role_id?: StringFieldUpdateOperationsInput | string
    role_name?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type a_user_roleCreateManyInput = {
    role_id: string
    role_name: string
    transaction_date: Date | string
  }

  export type a_user_roleUpdateManyMutationInput = {
    role_id?: StringFieldUpdateOperationsInput | string
    role_name?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type a_user_roleUncheckedUpdateManyInput = {
    role_id?: StringFieldUpdateOperationsInput | string
    role_name?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type a_user_systemCreateInput = {
    id_user: string
    transaction_date?: Date | string | null
    nik?: string | null
    username?: string | null
    password?: string | null
    role_id?: string | null
    office_email?: string | null
    department_code?: string | null
    is_active?: string | null
  }

  export type a_user_systemUncheckedCreateInput = {
    id_user: string
    transaction_date?: Date | string | null
    nik?: string | null
    username?: string | null
    password?: string | null
    role_id?: string | null
    office_email?: string | null
    department_code?: string | null
    is_active?: string | null
  }

  export type a_user_systemUpdateInput = {
    id_user?: StringFieldUpdateOperationsInput | string
    transaction_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nik?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    office_email?: NullableStringFieldUpdateOperationsInput | string | null
    department_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type a_user_systemUncheckedUpdateInput = {
    id_user?: StringFieldUpdateOperationsInput | string
    transaction_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nik?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    office_email?: NullableStringFieldUpdateOperationsInput | string | null
    department_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type a_user_systemCreateManyInput = {
    id_user: string
    transaction_date?: Date | string | null
    nik?: string | null
    username?: string | null
    password?: string | null
    role_id?: string | null
    office_email?: string | null
    department_code?: string | null
    is_active?: string | null
  }

  export type a_user_systemUpdateManyMutationInput = {
    id_user?: StringFieldUpdateOperationsInput | string
    transaction_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nik?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    office_email?: NullableStringFieldUpdateOperationsInput | string | null
    department_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type a_user_systemUncheckedUpdateManyInput = {
    id_user?: StringFieldUpdateOperationsInput | string
    transaction_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nik?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    office_email?: NullableStringFieldUpdateOperationsInput | string | null
    department_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type a_departmentCreateInput = {
    department_id: string
    department_code?: string | null
    department_name?: string | null
    created_at?: Date | string | null
  }

  export type a_departmentUncheckedCreateInput = {
    department_id: string
    department_code?: string | null
    department_name?: string | null
    created_at?: Date | string | null
  }

  export type a_departmentUpdateInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_code?: NullableStringFieldUpdateOperationsInput | string | null
    department_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type a_departmentUncheckedUpdateInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_code?: NullableStringFieldUpdateOperationsInput | string | null
    department_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type a_departmentCreateManyInput = {
    department_id: string
    department_code?: string | null
    department_name?: string | null
    created_at?: Date | string | null
  }

  export type a_departmentUpdateManyMutationInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_code?: NullableStringFieldUpdateOperationsInput | string | null
    department_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type a_departmentUncheckedUpdateManyInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_code?: NullableStringFieldUpdateOperationsInput | string | null
    department_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type a_user_roleCountOrderByAggregateInput = {
    role_id?: SortOrder
    role_name?: SortOrder
    transaction_date?: SortOrder
  }

  export type a_user_roleMaxOrderByAggregateInput = {
    role_id?: SortOrder
    role_name?: SortOrder
    transaction_date?: SortOrder
  }

  export type a_user_roleMinOrderByAggregateInput = {
    role_id?: SortOrder
    role_name?: SortOrder
    transaction_date?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type a_user_systemCountOrderByAggregateInput = {
    id_user?: SortOrder
    transaction_date?: SortOrder
    nik?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    office_email?: SortOrder
    department_code?: SortOrder
    is_active?: SortOrder
  }

  export type a_user_systemMaxOrderByAggregateInput = {
    id_user?: SortOrder
    transaction_date?: SortOrder
    nik?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    office_email?: SortOrder
    department_code?: SortOrder
    is_active?: SortOrder
  }

  export type a_user_systemMinOrderByAggregateInput = {
    id_user?: SortOrder
    transaction_date?: SortOrder
    nik?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    office_email?: SortOrder
    department_code?: SortOrder
    is_active?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type a_departmentCountOrderByAggregateInput = {
    department_id?: SortOrder
    department_code?: SortOrder
    department_name?: SortOrder
    created_at?: SortOrder
  }

  export type a_departmentMaxOrderByAggregateInput = {
    department_id?: SortOrder
    department_code?: SortOrder
    department_name?: SortOrder
    created_at?: SortOrder
  }

  export type a_departmentMinOrderByAggregateInput = {
    department_id?: SortOrder
    department_code?: SortOrder
    department_name?: SortOrder
    created_at?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use a_user_roleDefaultArgs instead
     */
    export type a_user_roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = a_user_roleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use a_user_systemDefaultArgs instead
     */
    export type a_user_systemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = a_user_systemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use a_departmentDefaultArgs instead
     */
    export type a_departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = a_departmentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}